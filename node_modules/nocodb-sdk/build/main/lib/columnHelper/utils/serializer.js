"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeEmail = exports.serializeSelectValue = exports.serializeYearValue = exports.serializeTimeValue = exports.serializeCurrencyValue = exports.serializeJsonValue = exports.serializeCheckboxValue = exports.serializeDurationValue = exports.serializePercentValue = exports.serializeDecimalValue = exports.serializeIntValue = exports.serializeStringValue = void 0;
const dayjs_1 = __importDefault(require("dayjs"));
const durationUtils_1 = require("../../../lib/durationUtils");
const helperFunctions_1 = require("../../../lib/helperFunctions");
const is_1 = require("../../../lib/is");
const UITypes_1 = __importDefault(require("../../../lib/UITypes"));
const error_1 = require("../../../lib/error");
const common_1 = require("../../../lib/columnHelper/utils/common");
/**
 * Remove outer quotes & unescape
 */
const serializeStringValue = (value) => {
    var _a;
    value = (_a = value === null || value === void 0 ? void 0 : value.toString()) !== null && _a !== void 0 ? _a : null;
    if (!value)
        return null;
    if (value.match(/^"[\s\S]*"$/)) {
        value = value.slice(1, -1).replace(/\\"/g, '"');
    }
    return value;
};
exports.serializeStringValue = serializeStringValue;
const serializeIntValue = (value) => {
    if ((0, is_1.ncIsNumber)(value)) {
        return parseInt(value.toString(), 10);
    }
    // If it's a string, remove commas and check if it's a valid number
    if ((0, is_1.ncIsString)(value)) {
        const cleanedValue = value.replace(/,/g, '').trim(); // Remove commas
        if (!cleanedValue)
            return null;
        // Try converting the cleaned value to a number
        const numberValue = Number(cleanedValue);
        // If it's a valid number, return it
        if (!isNaN(numberValue)) {
            return parseInt(numberValue.toString(), 10);
        }
    }
    return null; // Return null if it's not a valid number
};
exports.serializeIntValue = serializeIntValue;
const serializeDecimalValue = (value, callback) => {
    if ((0, is_1.ncIsNumber)(value)) {
        return Number(value);
    }
    // If it's a string, remove commas and check if it's a valid number
    if ((0, is_1.ncIsString)(value)) {
        const cleanedValue = (0, is_1.ncIsFunction)(callback)
            ? callback(value)
            : value.replace(/,/g, '').trim(); // Remove commas
        if (!cleanedValue)
            return null;
        // Try converting the cleaned value to a number
        const numberValue = Number(cleanedValue);
        // If it's a valid number, return it
        if (!isNaN(numberValue)) {
            return numberValue;
        }
    }
    return null;
};
exports.serializeDecimalValue = serializeDecimalValue;
const serializePercentValue = (value) => {
    if ((0, is_1.ncIsNumber)(value)) {
        return value;
    }
    // If it's a string, remove % and check if it's a valid number
    if ((0, is_1.ncIsString)(value)) {
        const cleanedValue = value.replace('%', ''); // Remove %
        if (!cleanedValue)
            return null;
        // Try converting the cleaned value to a number
        const numberValue = Number(cleanedValue);
        // If it's a valid number, return it
        if (!isNaN(numberValue)) {
            return numberValue;
        }
    }
    return null;
};
exports.serializePercentValue = serializePercentValue;
const serializeDurationValue = (value, col) => {
    var _a;
    // Check if the value is a pure number (interpreted as seconds)
    if (!(0, is_1.ncIsNaN)(value)) {
        return parseInt(value, 10); // Directly return seconds
    }
    const columnMeta = (0, helperFunctions_1.parseProp)(col.meta);
    const res = (0, durationUtils_1.convertDurationToSeconds)(value, (_a = columnMeta.duration) !== null && _a !== void 0 ? _a : 0);
    return res._isValid ? res._sec : null;
};
exports.serializeDurationValue = serializeDurationValue;
const serializeCheckboxValue = (value) => {
    if ((0, is_1.ncIsBoolean)(value))
        return value;
    if ((0, is_1.ncIsString)(value)) {
        const strval = value.trim().toLowerCase();
        const parsedValue = common_1.checkboxTypeMap[strval];
        if (!(0, is_1.ncIsNull)(parsedValue) && !(0, is_1.ncIsUndefined)(parsedValue)) {
            return parsedValue;
        }
    }
    return null;
};
exports.serializeCheckboxValue = serializeCheckboxValue;
const serializeJsonValue = (value) => {
    try {
        return (0, is_1.ncIsString)(value)
            ? JSON.stringify(JSON.parse(value)) // Ensure it's a valid JSON string
            : JSON.stringify(value); // Convert object/array to JSON
    }
    catch (_a) {
        return null;
    }
};
exports.serializeJsonValue = serializeJsonValue;
const serializeCurrencyValue = (value, col) => {
    return (0, exports.serializeDecimalValue)(value, (value) => {
        var _a, _b, _c;
        const columnMeta = (0, helperFunctions_1.parseProp)(col.meta);
        let group = ',';
        let decimal = '.';
        // Create a number formatter for the target locale (e.g., 'de-DE', 'en-US')
        const formatter = new Intl.NumberFormat((columnMeta === null || columnMeta === void 0 ? void 0 : columnMeta.currency_locale) || 'en-US');
        // If the locale is not set or is 'en-US', or the formatter does not support formatToParts, use the default behavior
        if (!(columnMeta === null || columnMeta === void 0 ? void 0 : columnMeta.currency_locale) ||
            columnMeta.currency_locale === 'en-US' ||
            typeof formatter.formatToParts !== 'function') {
            return (_a = value === null || value === void 0 ? void 0 : value.replace(/[^0-9.]/g, '')) === null || _a === void 0 ? void 0 : _a.trim();
        }
        // Use formatToParts to extract the characters used for grouping (thousands) and decimal
        const parts = formatter.formatToParts(12345.6);
        // Extract group separator (e.g., '.' in 'de-DE', ',' in 'en-US')
        group = ((_b = parts.find((p) => p.type === 'group')) === null || _b === void 0 ? void 0 : _b.value) || group;
        // Extract decimal separator (e.g., ',' in 'de-DE', '.' in 'en-US')
        decimal = ((_c = parts.find((p) => p.type === 'decimal')) === null || _c === void 0 ? void 0 : _c.value) || decimal;
        return value
            .replace(new RegExp('\\' + group, 'g'), '') // 1. Remove all group (thousands) separators
            .replace(new RegExp('\\' + decimal), '.') // 2. Replace the locale-specific decimal separator with a dot (.)
            .replace(/[^\d.-]/g, '') // 3. Remove any non-digit, non-dot, non-minus characters (e.g., currency symbols, spaces)
            .trim(); // 4. Trim whitespace from both ends of the string
    });
};
exports.serializeCurrencyValue = serializeCurrencyValue;
const serializeTimeValue = (value, params) => {
    var _a;
    value = value === null || value === void 0 ? void 0 : value.toString().trim();
    if (!value)
        return null;
    let parsedTime = (0, dayjs_1.default)(value);
    if (!parsedTime.isValid()) {
        parsedTime = (0, dayjs_1.default)(value, 'HH:mm:ss');
    }
    if (!parsedTime.isValid()) {
        parsedTime = (0, dayjs_1.default)(`1999-01-01 ${value}`);
    }
    if (!parsedTime.isValid()) {
        return null;
    }
    const dateFormat = ((_a = params.isMysql) === null || _a === void 0 ? void 0 : _a.call(params, params.col.source_id))
        ? 'YYYY-MM-DD HH:mm:ss'
        : 'YYYY-MM-DD HH:mm:ssZ';
    return parsedTime.format(dateFormat);
};
exports.serializeTimeValue = serializeTimeValue;
const serializeYearValue = (value) => {
    value = value === null || value === void 0 ? void 0 : value.toString().trim();
    if (!value)
        return null;
    const parsedDate = (0, dayjs_1.default)(value === null || value === void 0 ? void 0 : value.toString());
    return parsedDate.isValid() ? +parsedDate.format('YYYY') : null;
};
exports.serializeYearValue = serializeYearValue;
const serializeSelectValue = (value, col) => {
    var _a;
    // Always trim values for select fields to prevent creating options with leading/trailing spaces
    value = value === null || value === void 0 ? void 0 : value.toString().trim();
    // return null if value is empty
    if (!value)
        return null;
    // Todo: discuss new value creation
    const availableOptions = (((_a = col.colOptions) === null || _a === void 0 ? void 0 : _a.options) || []).map((o) => o.title);
    const optionsSet = new Set(availableOptions);
    let vals = value.split(',').map((val) => val.trim());
    const invalidVals = vals.filter((v) => !optionsSet.has(v));
    if (vals.length && col.uidt === UITypes_1.default.SingleSelect) {
        vals = [vals[0]];
    }
    // return null if no valid values
    if (invalidVals.length > 0) {
        throw new error_1.SelectTypeConversionError(vals, invalidVals);
    }
    return vals.join(',');
};
exports.serializeSelectValue = serializeSelectValue;
const serializeEmail = (v) => {
    const matches = v.match(/(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@(([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{2,})/i);
    return matches ? matches[0] : null;
};
exports.serializeEmail = serializeEmail;
//# sourceMappingURL=data:application/json;base64,