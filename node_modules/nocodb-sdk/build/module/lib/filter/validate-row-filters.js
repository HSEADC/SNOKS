import dayjs, { extend } from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat.js';
import isBetween from 'dayjs/plugin/isBetween';
import isSameOrAfter from 'dayjs/plugin/isSameOrAfter';
import isSameOrBefore from 'dayjs/plugin/isSameOrBefore';
import relativeTime from 'dayjs/plugin/relativeTime.js';
import { isDateMonthFormat } from '../../lib/dateTimeHelper';
import { buildFilterTree } from '../../lib/filterHelpers';
import { parseProp } from '../../lib/helperFunctions';
import UITypes from '../../lib/UITypes';
import { getLookupColumnType } from '../../lib/columnHelper/utils/get-lookup-column-type';
import { CURRENT_USER_TOKEN } from '../globals';
import { ColumnHelper } from '../columnHelper';
extend(relativeTime);
extend(customParseFormat);
extend(isSameOrBefore);
extend(isSameOrAfter);
extend(isBetween);
export function validateRowFilters(params) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
    const { filters: _filters, data, columns, client, metas } = params;
    if (!_filters.length) {
        return true;
    }
    const filters = buildFilterTree(_filters);
    let isValid = null;
    for (const filter of filters) {
        let res;
        if (filter.is_group && ((_a = filter.children) === null || _a === void 0 ? void 0 : _a.length)) {
            res = validateRowFilters({
                filters: filter.children,
                data: data,
                columns: columns,
                client: client,
                metas: metas,
            });
        }
        else {
            const column = columns.find((c) => c.id === filter.fk_column_id);
            if (!column) {
                continue;
            }
            const field = column.title;
            let val = data[field];
            if ([
                UITypes.Date,
                UITypes.DateTime,
                UITypes.CreatedTime,
                UITypes.LastModifiedTime,
            ].includes(column.uidt) &&
                !['empty', 'blank', 'notempty', 'notblank'].includes(filter.comparison_op)) {
                const dateFormat = client === 'mysql2' ? 'YYYY-MM-DD HH:mm:ss' : 'YYYY-MM-DD HH:mm:ssZ';
                let now = dayjs(new Date());
                const dateFormatFromMeta = (_b = parseProp(column.meta)) === null || _b === void 0 ? void 0 : _b.date_format;
                const dataVal = val;
                let filterVal = filter.value;
                if (dateFormatFromMeta && isDateMonthFormat(dateFormatFromMeta)) {
                    // reset to 1st
                    now = dayjs(now).date(1);
                    if (val)
                        val = dayjs(val).date(1);
                }
                if (filterVal)
                    res = dayjs(filterVal).isSame(dataVal, 'day');
                // handle sub operation
                switch (filter.comparison_sub_op) {
                    case 'today':
                        filterVal = now;
                        break;
                    case 'tomorrow':
                        filterVal = now.add(1, 'day');
                        break;
                    case 'yesterday':
                        filterVal = now.add(-1, 'day');
                        break;
                    case 'oneWeekAgo':
                        filterVal = now.add(-1, 'week');
                        break;
                    case 'oneWeekFromNow':
                        filterVal = now.add(1, 'week');
                        break;
                    case 'oneMonthAgo':
                        filterVal = now.add(-1, 'month');
                        break;
                    case 'oneMonthFromNow':
                        filterVal = now.add(1, 'month');
                        break;
                    case 'daysAgo':
                        if (!filterVal)
                            return null;
                        filterVal = now.add(-filterVal, 'day');
                        break;
                    case 'daysFromNow':
                        if (!filterVal)
                            return null;
                        filterVal = now.add(filterVal, 'day');
                        break;
                    case 'exactDate':
                        if (!filterVal)
                            return null;
                        break;
                    // sub-ops for `isWithin` comparison
                    case 'pastWeek':
                        filterVal = now.add(-1, 'week');
                        break;
                    case 'pastMonth':
                        filterVal = now.add(-1, 'month');
                        break;
                    case 'pastYear':
                        filterVal = now.add(-1, 'year');
                        break;
                    case 'nextWeek':
                        filterVal = now.add(1, 'week');
                        break;
                    case 'nextMonth':
                        filterVal = now.add(1, 'month');
                        break;
                    case 'nextYear':
                        filterVal = now.add(1, 'year');
                        break;
                    case 'pastNumberOfDays':
                        if (!filterVal)
                            return null;
                        filterVal = now.add(-filterVal, 'day');
                        break;
                    case 'nextNumberOfDays':
                        if (!filterVal)
                            return null;
                        filterVal = now.add(filterVal, 'day');
                        break;
                }
                if (dataVal) {
                    switch (filter.comparison_op) {
                        case 'eq':
                        case 'gb_eq':
                            res = dayjs(dataVal).isSame(filterVal, 'day');
                            break;
                        case 'neq':
                            res = !dayjs(dataVal).isSame(filterVal, 'day');
                            break;
                        case 'gt':
                            res = dayjs(dataVal).isAfter(filterVal, 'day');
                            break;
                        case 'lt':
                            res = dayjs(dataVal).isBefore(filterVal, 'day');
                            break;
                        case 'lte':
                        case 'le':
                            res = dayjs(dataVal).isSameOrBefore(filterVal, 'day');
                            break;
                        case 'gte':
                        case 'ge':
                            res = dayjs(dataVal).isSameOrAfter(filterVal, 'day');
                            break;
                        case 'empty':
                        case 'blank':
                            res = dataVal === '' || dataVal === null || dataVal === undefined;
                            break;
                        case 'notempty':
                        case 'notblank':
                            res = !(dataVal === '' ||
                                dataVal === null ||
                                dataVal === undefined);
                            break;
                        case 'isWithin': {
                            let now = dayjs(new Date()).format(dateFormat).toString();
                            now = column.uidt === UITypes.Date ? now.substring(0, 10) : now;
                            switch (filter.comparison_sub_op) {
                                case 'pastWeek':
                                case 'pastMonth':
                                case 'pastYear':
                                case 'pastNumberOfDays':
                                    res = dayjs(dataVal).isBetween(filterVal, now, 'day');
                                    break;
                                case 'nextWeek':
                                case 'nextMonth':
                                case 'nextYear':
                                case 'nextNumberOfDays':
                                    res = dayjs(dataVal).isBetween(now, filterVal, 'day');
                                    break;
                            }
                        }
                    }
                }
            }
            else {
                switch (typeof filter.value) {
                    case 'boolean':
                        val = !!data[field];
                        break;
                    case 'number':
                        val = +data[field];
                        break;
                }
                if ([UITypes.User, UITypes.CreatedBy, UITypes.LastModifiedBy].includes(column.uidt) ||
                    (column.uidt === UITypes.Lookup &&
                        [UITypes.User, UITypes.CreatedBy, UITypes.LastModifiedBy].includes(getLookupColumnType({
                            col: column,
                            meta: { columns },
                            metas: metas,
                        })))) {
                    const userIds = Array.isArray(data[field])
                        ? data[field].map((user) => user.id)
                        : ((_c = data[field]) === null || _c === void 0 ? void 0 : _c.id)
                            ? [data[field].id]
                            : [];
                    const filterValues = (((_d = filter.value) === null || _d === void 0 ? void 0 : _d.split(',')) || []).map((v) => {
                        var _a, _b, _c;
                        let result = v.trim();
                        if (result === CURRENT_USER_TOKEN) {
                            result = (_c = (_b = (_a = params.options) === null || _a === void 0 ? void 0 : _a.currentUser) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : result;
                        }
                        return result;
                    });
                    switch (filter.comparison_op) {
                        case 'anyof':
                            res = userIds.some((id) => filterValues.includes(id));
                            break;
                        case 'nanyof':
                            res = !userIds.some((id) => filterValues.includes(id));
                            break;
                        case 'allof':
                            res = filterValues.every((id) => userIds.includes(id));
                            break;
                        case 'nallof':
                            res = !filterValues.every((id) => userIds.includes(id));
                            break;
                        case 'empty':
                        case 'blank':
                            res = userIds.length === 0;
                            break;
                        case 'notempty':
                        case 'notblank':
                            res = userIds.length > 0;
                            break;
                        default:
                            res = false; // Unsupported operation for User fields
                    }
                }
                else if ([UITypes.JSON, UITypes.Time].includes(column.uidt) && ['eq'].includes(filter.comparison_op)) {
                    res = ColumnHelper.getColumn(column.uidt).equalityComparison(val, filter.value, {
                        col: column,
                    });
                }
                else {
                    switch (filter.comparison_op) {
                        case 'eq':
                        case 'gb_eq':
                            res = val == filter.value;
                            break;
                        case 'neq':
                            res = val != filter.value;
                            break;
                        case 'like':
                            res =
                                ((_h = (_g = (_f = (_e = data[field]) === null || _e === void 0 ? void 0 : _e.toString) === null || _f === void 0 ? void 0 : _f.call(_e)) === null || _g === void 0 ? void 0 : _g.toLowerCase()) === null || _h === void 0 ? void 0 : _h.indexOf((_j = filter.value) === null || _j === void 0 ? void 0 : _j.toLowerCase())) > -1;
                            break;
                        case 'nlike':
                            res =
                                ((_o = (_m = (_l = (_k = data[field]) === null || _k === void 0 ? void 0 : _k.toString) === null || _l === void 0 ? void 0 : _l.call(_k)) === null || _m === void 0 ? void 0 : _m.toLowerCase()) === null || _o === void 0 ? void 0 : _o.indexOf((_p = filter.value) === null || _p === void 0 ? void 0 : _p.toLowerCase())) === -1;
                            break;
                        case 'empty':
                        case 'blank':
                            res =
                                data[field] === '' ||
                                    data[field] === null ||
                                    data[field] === undefined;
                            break;
                        case 'notempty':
                        case 'notblank':
                            res = !(data[field] === '' ||
                                data[field] === null ||
                                data[field] === undefined);
                            break;
                        case 'checked':
                            res = !!data[field];
                            break;
                        case 'notchecked':
                            res = !data[field];
                            break;
                        case 'null':
                            res = res = data[field] === null;
                            break;
                        case 'notnull':
                            res = data[field] !== null;
                            break;
                        case 'allof':
                            res = ((_r = (_q = filter.value) === null || _q === void 0 ? void 0 : _q.split(',').map((item) => item.trim())) !== null && _r !== void 0 ? _r : []).every((item) => { var _a, _b; return ((_b = (_a = data[field]) === null || _a === void 0 ? void 0 : _a.split(',')) !== null && _b !== void 0 ? _b : []).includes(item); });
                            break;
                        case 'anyof':
                            res = ((_t = (_s = filter.value) === null || _s === void 0 ? void 0 : _s.split(',').map((item) => item.trim())) !== null && _t !== void 0 ? _t : []).some((item) => { var _a, _b; return ((_b = (_a = data[field]) === null || _a === void 0 ? void 0 : _a.split(',')) !== null && _b !== void 0 ? _b : []).includes(item); });
                            break;
                        case 'nallof':
                            res = !((_v = (_u = filter.value) === null || _u === void 0 ? void 0 : _u.split(',').map((item) => item.trim())) !== null && _v !== void 0 ? _v : []).every((item) => { var _a, _b; return ((_b = (_a = data[field]) === null || _a === void 0 ? void 0 : _a.split(',')) !== null && _b !== void 0 ? _b : []).includes(item); });
                            break;
                        case 'nanyof':
                            res = !((_x = (_w = filter.value) === null || _w === void 0 ? void 0 : _w.split(',').map((item) => item.trim())) !== null && _x !== void 0 ? _x : []).some((item) => { var _a, _b; return ((_b = (_a = data[field]) === null || _a === void 0 ? void 0 : _a.split(',')) !== null && _b !== void 0 ? _b : []).includes(item); });
                            break;
                        case 'lt':
                            res = +data[field] < +filter.value;
                            break;
                        case 'lte':
                        case 'le':
                            res = +data[field] <= +filter.value;
                            break;
                        case 'gt':
                            res = +data[field] > +filter.value;
                            break;
                        case 'gte':
                        case 'ge':
                            res = +data[field] >= +filter.value;
                            break;
                    }
                }
            }
        }
        switch (filter.logical_op) {
            case 'or':
                isValid = isValid || !!res;
                break;
            case 'not':
                isValid = isValid && !res;
                break;
            case 'and':
            default:
                isValid = (isValid !== null && isValid !== void 0 ? isValid : true) && res;
                break;
        }
    }
    return isValid;
}
//# sourceMappingURL=data:application/json;base64,